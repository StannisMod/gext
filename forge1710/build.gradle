buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "github"
            url = "https://github.com/juanmuscaria/maven/raw/master"
        }
    }
    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
            changing = true
        }
    }
}

apply plugin: 'java'
apply plugin: 'forge'
apply plugin: 'maven-publish'
apply plugin: 'signing'

version = parent.version
group = parent.version
archivesBaseName = "GExt"

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    mappings = "stable_12"
    runDir = "eclipse"
}

configurations {
    extraLibs {
        transitive = false
    }
    implementation.extendsFrom extraLibs
}

dependencies {
    extraLibs project(":api")
    extraLibs project(":core")
}

task sourcesJar(type: Jar, dependsOn: classes, group: 'build') {
    classifier = 'sources'
    from sourceSets.main.allSource
    from parent.subprojects.collect { proj ->
        if (include.contains(proj.name)) {
            proj.sourceSets.main.allSource
        } else {
            sourceSets.main.allSource
        }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

artifacts {
    archives sourcesJar
    archives jar
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar

            pom {
                groupId = "com.github.stannismod.gext"
                name = project.name
                description = 'The runtime library of GExt for MinecraftForge 1.12'
                url = 'https://github.com/StannisMod/gext'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/StannisMod/gext.git'
                    developerConnection = 'scm:git:git@github.com:https://github.com/StannisMod/gext.git'
                    url = 'https://github.com/StannisMod/gext.git'
                }
            }
        }
    }
    repositories {
        def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
        maven {
            url = isReleaseVersion ? releasesRepoUrl : snapshotsRepoUrl
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
            }
        }
    }
}

signing {
    required { project.hasProperty("signing.keyId") }
    sign configurations.archives
}
